

# Initialize occupancy status of patch
landscape_data$resource_occupied <- landscape_data$clusters == 1
landscape_data$consumer_occupied <- landscape_data$clusters == 1


n_patches = length(unique(na.omit(landscape_data$clusters))) # Number of patches omitting NAs
t <- 1               # Initial time
t_final <- 200       # number of time steps
R0 <- 40             # Initial FTC in patch
C0 <- 20              # Initial Fly in patch
a <- 2.5               # Ability of FTC to avoid flies
A <- 53              # FTC half-saturation constant ???
b <- 4.3               # Fly consumption ability
B <- 35              # Fly half-saturation constant
e <- 0.5             # Extinction rate of the fly
K <- 100             # FTC Carrying capacity
# Initialize objects before loop
cr_patches <- vector("list", )
cr_patch1 <- data.frame(Resource = numeric(t_final), # consumer-resource dynamics time series for patch 1
                        Consumer = numeric(t_final))
cr_patch1$Resource[1] = R0 # Set initials
cr_patch1$Consumer[1] = C0
for(t in 1:(t_final-1)) {
  # Patch CR dynamics ####
  
  # Subset data for the current patch
  current_cluster <- filter(landscape_data, clusters==t)
  
  # Calculate current values
  R1 <- cr_patch1$Resource # for readability
  C1 <- cr_patch1$Consumer # for readability
  R1[t+1] = R1[t] + a * R1[t] * (1 - R1[t] / K) - b * R1[t] / (A + R1[t]) * C1[t] # Resource AKA FTC dynamics
  C1[t+1] = C1[t] + e * ((R1[t] / (A + R1[t])) - (B / (B + A))) * C1[t] # Consumer AKA Fly dynamics
  cr_patch1$Resource[t+1] <- R1[t+1]
  cr_patch1$Consumer[t+1] <- C1[t+1]
}# patch 1 CR plot
ggplot(cr_patch1, aes(x = as.numeric(row.names(cr_patch1)))) +
  geom_path(aes(y = Resource), colour = "salmon") +
  geom_path(aes(y = Consumer), colour = "purple") +
  labs(title = "Patch Dynamics", x = "Timestep", y = "Population size") +
  theme_minimal() +
  theme(legend.position="none")