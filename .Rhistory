geom_line(aes(y = J2, color = "Old Juvenile Hosts")) +
geom_line(aes(y = A, color = "Adult Hosts")) +
geom_line(aes(y = P, color = "Parasitoids")) +
labs(
title = "Host-Parasitoid Dynamics",
x = "Time",
y = "Population Size"
) +
scale_color_manual(
name = "Population",
values = c(
"Young Juvenile Hosts" = "blue",
"Old Juvenile Hosts" = "red",
"Adult Hosts" = "green",
"Parasitoids" = "purple"
)
) +
theme_minimal()
# Load the deSolve package
library(deSolve)
# Define parameters
params <- list(
rho = 3,       # Per-individual lifetime adult host fecundity
TA = 2,         # Average duration of adult host stage
a1 = 0.1,       # Parasitoid attack rate on young juvenile hosts
dJ1 = 0.05,     # Death rate of young juvenile hosts
dJ2 = 0.02,     # Death rate of old juvenile hosts
dA = 0.02,      # Death rate of adult hosts
a2 = 0.01,       # Parasitoid attack rate on old juvenile hosts
dP = 0.01,      # Death rate of parasitoids
T1 = 1,         # Duration of young juvenile host stage
T2 = 3,         # Duration of old juvenile host stage
TP = 5          # Duration of immature parasitoid stage
)
# Initial population values
initial <- c(
J1 = 50,    # Initial young juvenile hosts
J2 = 30,    # Initial old juvenile hosts
A = 20,     # Initial adult hosts
P = 15      # Initial parasitoids
)
# Time sequence for simulation
time <- seq(0, 50, by = 0.1)
# Define the system of differential equations
host_parasitoid <- function(t, state, params) {
with(as.list(c(state, params)), {
# Recruitment rates
RJ1 <- (rho / TA) * A
RJ2 <- RJ1 * exp(-a1 * P * T1 - dJ1 * T1)
RA <- RJ2 * exp(-a2 * P * T2 - dJ2 * T2)
RP <- (a2 * J2 * P) * exp(-dP * TP)
# Differential equations
dJ1 <- RJ1 - RJ2 - a1 * J1 * P - dJ1 * J1
dJ2 <- RJ2 - RA - a2 * J2 * P - dJ2 * J2
dA <- RA - dA * A
dP <- RP - dP * P
# Return as a list
list(c(dJ1, dJ2, dA, dP))
})
}
# Solve the system of equations
output <- ode(y = initial, times = time, func = host_parasitoid, parms = params)
# Convert output to a data frame
output <- as.data.frame(output)
# Plot results
library(ggplot2)
ggplot(output, aes(x = time)) +
geom_line(aes(y = J1, color = "Young Juvenile Hosts")) +
geom_line(aes(y = J2, color = "Old Juvenile Hosts")) +
geom_line(aes(y = A, color = "Adult Hosts")) +
geom_line(aes(y = P, color = "Parasitoids")) +
labs(
title = "Host-Parasitoid Dynamics",
x = "Time",
y = "Population Size"
) +
scale_color_manual(
name = "Population",
values = c(
"Young Juvenile Hosts" = "blue",
"Old Juvenile Hosts" = "red",
"Adult Hosts" = "green",
"Parasitoids" = "purple"
)
) +
theme_minimal()
# Define parameters
a1 <- 0.1   # Parasitoid attack rate on young juvenile hosts
dJ1 <- 0.05 # Background death rate of young juvenile hosts
T1 <- 3     # Duration of young juvenile host stage
# Define survival function S_J1
survival_J1 <- function(P, T1, a1, dJ1) {
exp(-((a1 * P + dJ1) * T1))
}
# Range of parasitoid population sizes
P_values <- seq(0, 50, by = 1)
# Calculate survival for different parasitoid densities
survival_values <- survival_J1(P_values, T1, a1, dJ1)
# Plot the survival curve
library(ggplot2)
ggplot(data.frame(P = P_values, Survival = survival_values), aes(x = P, y = Survival)) +
geom_line(color = "blue", size = 1) +
labs(
title = "Survival of Young Juvenile Hosts (J1)",
x = "Parasitoid Population (P)",
y = "Survival (S_J1)"
) +
theme_minimal()
# Define the function
g_function <- function(x, c, b) {
(c * x) / (1 + b * x)
}
# Define parameter values
c <- 1.5  # Maximum value of g as x approaches infinity
b <- 0.5  # Controls the steepness of the curve
# Generate a range of x values
x_values <- seq(0, 10, by = 0.1)  # Adjust the range as needed
# Calculate g for each x
g_values <- g_function(x_values, c, b)
# Plot the function using ggplot2
library(ggplot2)
ggplot(data.frame(x = x_values, g = g_values), aes(x = x, y = g)) +
geom_line(color = "blue", size = 1) +
labs(
title = "Visualization of g = (c * x) / (1 + b * x)",
x = "x (Input Variable)",
y = "g (Output Variable)"
) +
theme_minimal()
# Load the deSolve package
library(deSolve)
# Define parameters
params <- list(
rho = 3,       # Per-individual lifetime adult host fecundity
TA = 2,         # Average duration of adult host stage
a1 = 0.1,       # Parasitoid attack rate on young juvenile hosts
dJ1 = 0.05,     # Death rate of young juvenile hosts
dJ2 = 0.02,     # Death rate of old juvenile hosts
dA = 0.02,      # Death rate of adult hosts
a2 = 0.01,       # Parasitoid attack rate on old juvenile hosts
dP = 0.01,      # Death rate of parasitoids
T1 = 1,         # Duration of young juvenile host stage
T2 = 3,         # Duration of old juvenile host stage
TP = 5          # Duration of immature parasitoid stage
)
# Initial population values
initial <- c(
J1 = 50,    # Initial young juvenile hosts
J2 = 30,    # Initial old juvenile hosts
A = 20,     # Initial adult hosts
P = 15      # Initial parasitoids
)
# Time sequence for simulation
time <- seq(0, 50, by = 0.1)
# Define the system of differential equations
host_parasitoid <- function(t, state, params) {
with(as.list(c(state, params)), {
# Recruitment rates
RJ1 <- (rho / TA) * A
RJ2 <- RJ1 * exp(-a1 * P * T1 - dJ1 * T1)
RA <- RJ2 * exp(-a2 * P * T2 - dJ2 * T2)
RP <- (a2 * J2 * P) * exp(-dP * TP)
# Differential equations
dJ1 <- RJ1 - RJ2 - a1 * J1 * P - dJ1 * J1
dJ2 <- RJ2 - RA - a2 * J2 * P - dJ2 * J2
dA <- RA - dA * A
dP <- RP - dP * P
# Return as a list
list(c(dJ1, dJ2, dA, dP))
})
}
# Solve the system of equations
output <- ode(y = initial, times = time, func = host_parasitoid, parms = params)
# Convert output to a data frame
output <- as.data.frame(output)
# Plot results
library(ggplot2)
ggplot(output, aes(x = time)) +
geom_line(aes(y = J1, color = "Young Juvenile Hosts")) +
geom_line(aes(y = J2, color = "Old Juvenile Hosts")) +
geom_line(aes(y = A, color = "Adult Hosts")) +
geom_line(aes(y = P, color = "Parasitoids")) +
labs(
title = "Host-Parasitoid Dynamics",
x = "Time",
y = "Population Size"
) +
scale_color_manual(
name = "Population",
values = c(
"Young Juvenile Hosts" = "blue",
"Old Juvenile Hosts" = "red",
"Adult Hosts" = "green",
"Parasitoids" = "purple"
)
) +
theme_minimal()
# Load required package
library(deSolve)
# Define the Rosenzweig-MacArthur model
rosenzweig_macarthur <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
# Differential equations
dR <- r * R * (1 - R / K) - (a * C * R) / (1 + a * T_h * R)
dC <- C * ((a * e * R) / (1 + a * T_h * R) - d)
return(list(c(dR, dC)))
})
}
# Set initial conditions
state <- c(R = 10, C = 5)  # Initial population sizes for resource and consumer
# Set parameters
parameters <- c(
r = 0.5,    # Resource growth rate
K = 50,     # Carrying capacity
a = 0.1,    # Attack rate
T_h = 0.1,  # Handling time
e = 0.2,    # Conversion efficiency
d = 0.1     # Consumer mortality rate
)
# Set time points
times <- seq(0, 200, by = 0.1)  # From 0 to 200, in steps of 0.1
# Solve the model
output <- ode(y = state, times = times, func = rosenzweig_macarthur, parms = parameters)
# Convert output to a data frame for plotting
output_df <- as.data.frame(output)
# Plot the results
library(ggplot2)
ggplot(output_df, aes(x = time)) +
geom_line(aes(y = R, colour = "Resource (R)"), size = 1) +
geom_line(aes(y = C, colour = "Consumer (C)"), size = 1) +
labs(
title = "Rosenzweig-MacArthur Consumer-Resource Dynamics",
x = "Time",
y = "Population Size",
colour = "Population"
) +
theme_minimal() +
scale_colour_manual(values = c("Resource (R)" = "blue", "Consumer (C)" = "red"))
# Load the deSolve package
library(deSolve)
# Define parameters
params <- list(
rho = 10,       # Per-individual lifetime adult host fecundity
TA = 5,         # Average duration of adult host stage
a1 = 0.1,       # Parasitoid attack rate on young juvenile hosts
dJ1 = 0.05,     # Death rate of young juvenile hosts
dA = 0.02,      # Death rate of adult hosts
a2 = 0.1,       # Parasitoid attack rate on old juvenile hosts
dP = 0.01,      # Death rate of parasitoids
T1 = 3,         # Duration of young juvenile host stage
T2 = 3,         # Duration of old juvenile host stage
TP = 5          # Duration of immature parasitoid stage
)
# Initial population values
initial <- c(
J1 = 50,    # Initial young juvenile hosts
J2 = 30,    # Initial old juvenile hosts
A = 20,     # Initial adult hosts
P = 15      # Initial parasitoids
)
# Time sequence for simulation
time <- seq(0, 50, by = 0.1)
# Define the system of differential equations
host_parasitoid <- function(t, state, params) {
with(as.list(c(state, params)), {
# Recruitment rates
RJ1 <- (rho / TA) * A
RJ2 <- RJ1 * exp(-a1 * P * T1 - dJ1 * T1)
RA <- RJ2 * exp(-a2 * P * T2 - dJ2 * T2)
RP <- (a2 * J2 * P) * exp(-dP * TP)
# Differential equations
dJ1 <- RJ1 - RJ2 - a1 * J1 * P - dJ1 * J1
dJ2 <- RJ2 - RA - a2 * J2 * P - dJ2 * J2
dA <- RA - dA * A
dP <- RP - dP * P
# Return as a list
list(c(dJ1, dJ2, dA, dP))
})
}
# Solve the system of equations
output <- ode(y = initial, times = time, func = host_parasitoid, parms = params)
)
# Load the deSolve package
library(deSolve)
# Define parameters
params <- list(
rho = 10,       # Per-individual lifetime adult host fecundity
TA = 5,         # Average duration of adult host stage
a1 = 0.1,       # Parasitoid attack rate on young juvenile hosts
dJ1 = 0.05,     # Death rate of young juvenile hosts
dA = 0.02,      # Death rate of adult hosts
a2 = 0.1,       # Parasitoid attack rate on old juvenile hosts
dP = 0.01,      # Death rate of parasitoids
T1 = 3,         # Duration of young juvenile host stage
T2 = 3,         # Duration of old juvenile host stage
TP = 5          # Duration of immature parasitoid stage
)
# Initial population values
initial <- c(
J1 = 50,    # Initial young juvenile hosts
J2 = 30,    # Initial old juvenile hosts
A = 20,     # Initial adult hosts
P = 15      # Initial parasitoids
)
# Time sequence for simulation
time <- seq(0, 50, by = 0.1)
# Define the system of differential equations
host_parasitoid <- function(t, state, params) {
with(as.list(c(state, params)), {
# Recruitment rates
RJ1 <- (rho / TA) * A
RJ2 <- RJ1 * exp(-a1 * P * T1 - dJ1 * T1)
RA <- RJ2 * exp(-a2 * P * T2 - dJ2 * T2)
RP <- (a2 * J2 * P) * exp(-dP * TP)
# Differential equations
dJ1 <- RJ1 - RJ2 - a1 * J1 * P - dJ1 * J1
dJ2 <- RJ2 - RA - a2 * J2 * P - dJ2 * J2
dA <- RA - dA * A
dP <- RP - dP * P
# Return as a list
list(c(dJ1, dJ2, dA, dP))
})
}
# Solve the system of equations
output <- ode(y = initial, times = time, func = host_parasitoid, parms = params)
# Load the deSolve package
library(deSolve)
# Define parameters
params <- list(
rho = 10,       # Per-individual lifetime adult host fecundity
TA = 5,         # Average duration of adult host stage
a1 = 0.1,       # Parasitoid attack rate on young juvenile hosts
dJ1 = 0.05,     # Death rate of young juvenile hosts
dJ2 = 0.04,     # Death rate of old juvenile hosts
dA = 0.02,      # Death rate of adult hosts
a2 = 0.1,       # Parasitoid attack rate on old juvenile hosts
dP = 0.01,      # Death rate of parasitoids
T1 = 3,         # Duration of young juvenile host stage
T2 = 3,         # Duration of old juvenile host stage
TP = 5          # Duration of immature parasitoid stage
)
# Initial population values
initial <- c(
J1 = 50,    # Initial young juvenile hosts
J2 = 30,    # Initial old juvenile hosts
A = 20,     # Initial adult hosts
P = 15      # Initial parasitoids
)
# Time sequence for simulation
time <- seq(0, 50, by = 0.1)
# Define the system of differential equations
host_parasitoid <- function(t, state, params) {
with(as.list(c(state, params)), {
# Recruitment rates
RJ1 <- (rho / TA) * A
RJ2 <- RJ1 * exp(-a1 * P * T1 - dJ1 * T1)
RA <- RJ2 * exp(-a2 * P * T2 - dJ2 * T2)
RP <- (a2 * J2 * P) * exp(-dP * TP)
# Differential equations
dJ1 <- RJ1 - RJ2 - a1 * J1 * P - dJ1 * J1
dJ2 <- RJ2 - RA - a2 * J2 * P - dJ2 * J2
dA <- RA - dA * A
dP <- RP - dP * P
# Return as a list
list(c(dJ1, dJ2, dA, dP))
})
}
# Solve the system of equations
output <- ode(y = initial, times = time, func = host_parasitoid, parms = params)
# Convert output to a data frame
output <- as.data.frame(output)
# Plot results
library(ggplot2)
ggplot(output, aes(x = time)) +
geom_line(aes(y = J1, color = "Young Juvenile Hosts")) +
geom_line(aes(y = J2, color = "Old Juvenile Hosts")) +
geom_line(aes(y = A, color = "Adult Hosts")) +
geom_line(aes(y = P, color = "Parasitoids")) +
labs(
title = "Host-Parasitoid Dynamics",
x = "Time",
y = "Population Size"
) +
scale_color_manual(
name = "Population",
values = c(
"Young Juvenile Hosts" = "blue",
"Old Juvenile Hosts" = "red",
"Adult Hosts" = "green",
"Parasitoids" = "purple"
)
) +
theme_minimal()
# Load the deSolve package
library(deSolve)
# Define parameters
params <- list(
rho = 10,       # Per-individual lifetime adult host fecundity
TA = 5,         # Average duration of adult host stage
a1 = 0.1,       # Parasitoid attack rate on young juvenile hosts
dJ1 = 0.05,     # Death rate of young juvenile hosts
dJ2 = 0.04,     # Death rate of old juvenile hosts
dA = 0.02,      # Death rate of adult hosts
a2 = 0.1,       # Parasitoid attack rate on old juvenile hosts
dP = 0.01,      # Death rate of parasitoids
T1 = 3,         # Duration of young juvenile host stage
T2 = 3,         # Duration of old juvenile host stage
TP = 5          # Duration of immature parasitoid stage
)
# Initial population values
initial <- c(
J1 = 50,    # Initial young juvenile hosts
J2 = 30,    # Initial old juvenile hosts
A = 20,     # Initial adult hosts
P = 1      # Initial parasitoids
)
# Time sequence for simulation
time <- seq(0, 50, by = 0.1)
# Define the system of differential equations
host_parasitoid <- function(t, state, params) {
with(as.list(c(state, params)), {
# Recruitment rates
RJ1 <- (rho / TA) * A
RJ2 <- RJ1 * exp(-a1 * P * T1 - dJ1 * T1)
RA <- RJ2 * exp(-a2 * P * T2 - dJ2 * T2)
RP <- (a2 * J2 * P) * exp(-dP * TP)
# Differential equations
dJ1 <- RJ1 - RJ2 - a1 * J1 * P - dJ1 * J1
dJ2 <- RJ2 - RA - a2 * J2 * P - dJ2 * J2
dA <- RA - dA * A
dP <- RP - dP * P
# Return as a list
list(c(dJ1, dJ2, dA, dP))
})
}
# Solve the system of equations
output <- ode(y = initial, times = time, func = host_parasitoid, parms = params)
# Convert output to a data frame
output <- as.data.frame(output)
# Plot results
library(ggplot2)
ggplot(output, aes(x = time)) +
geom_line(aes(y = J1, color = "Young Juvenile Hosts")) +
geom_line(aes(y = J2, color = "Old Juvenile Hosts")) +
geom_line(aes(y = A, color = "Adult Hosts")) +
geom_line(aes(y = P, color = "Parasitoids")) +
labs(
title = "Host-Parasitoid Dynamics",
x = "Time",
y = "Population Size"
) +
scale_color_manual(
name = "Population",
values = c(
"Young Juvenile Hosts" = "blue",
"Old Juvenile Hosts" = "red",
"Adult Hosts" = "green",
"Parasitoids" = "purple"
)
) +
theme_minimal()
# Load necessary library
library(ggplot2)
# Define the GEV CDF function
gev_cdf <- function(x, mu, sigma, xi) {
if (xi == 0) {
return(exp(-exp(-(x - mu) / sigma)))
} else {
return(exp(-((1 + xi * (x - mu) / sigma)^(-1 / xi))))
}
}
# Parameters for visualization
mu <- 0      # Location parameter
sigma <- 1   # Scale parameter
xi_values <- c(-0.5, 0, 0.5)  # Different shape parameters
x <- seq(-2, 5, length.out = 1000)
# Generate data for plotting
data <- data.frame()
for (xi in xi_values) {
cdf_values <- sapply(x, function(t) {
if (1 + xi * (t - mu) / sigma > 0 || xi == 0) {
gev_cdf(t, mu, sigma, xi)
} else {
NA  # Undefined for certain x when xi < 0
}
})
temp <- data.frame(x = x, CDF = cdf_values, xi = as.factor(xi))
data <- rbind(data, temp)
}
# Plot the GEV CDF
ggplot(data, aes(x = x, y = CDF, color = xi)) +
geom_line(size = 1) +
labs(title = "Cumulative Distribution Function of GEV",
x = "x", y = "F(x; μ, σ, ξ)",
color = "Shape (ξ)") +
theme_minimal() +
scale_color_manual(values = c("blue", "green", "red"))
# Install and load the ismev package
if (!require(ismev)) install.packages("ismev")
library(ismev)
# Simulated example block maxima data
block_maxima <- c(2.3, 2.7, 3.1, 2.9, 3.4, 2.8, 3.0, 2.6, 3.3, 2.9)
# Fit the GEV distribution to the data
gev_fit <- gev.fit(block_maxima)
# Print results
print(gev_fit)
# Extract xi estimate
xi <- gev_fit$mle[3]  # Shape parameter (xi)
cat("Estimated xi:", xi, "\n")
pi
dxbar
2 / (pi * dxbar^2) * exp(-2 * dij / dxbar)
